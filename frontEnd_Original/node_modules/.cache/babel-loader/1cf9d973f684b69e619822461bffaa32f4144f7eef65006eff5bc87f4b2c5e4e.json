{"ast":null,"code":"export default function authHeader() {\n  // auth-header.js : http 인증 헤더 파일 정의\n  // 1. 토큰 가져오기\n  // 2. { Authorization: 'Bearer ' + 토큰 } : 토큰 보내는 신호\n\n  // 로컬스토리지 : user 키이름으로 정보 있음(with 토큰)\n  let user = JSON.parse(localStorage.getItem(\"user\"));\n\n  // 헤더에 2번 정보(토큰 보내는 신호) 만들기\n  if (user && user.accessToken) {\n    // springboot 사용하는 헤더 토큰 인증 규칙\n    return {\n      Authorization: \"Bearer \" + user.accessToken\n    };\n    // return { 'x-access-token' : user.accessToken} // Node.js Express 서버\n  } else {\n    return {};\n  }\n}","map":{"version":3,"names":["authHeader","user","JSON","parse","localStorage","getItem","accessToken","Authorization"],"sources":["F:/Work/GitHub/DsProject/frontEnd_Original/src/services/auth-header.js"],"sourcesContent":["export default function authHeader() {\r\n  // auth-header.js : http 인증 헤더 파일 정의\r\n  // 1. 토큰 가져오기\r\n  // 2. { Authorization: 'Bearer ' + 토큰 } : 토큰 보내는 신호\r\n\r\n  // 로컬스토리지 : user 키이름으로 정보 있음(with 토큰)\r\n  let user = JSON.parse(localStorage.getItem(\"user\"));\r\n\r\n  // 헤더에 2번 정보(토큰 보내는 신호) 만들기\r\n  if (user && user.accessToken) {\r\n    // springboot 사용하는 헤더 토큰 인증 규칙\r\n    return { Authorization: \"Bearer \" + user.accessToken };\r\n    // return { 'x-access-token' : user.accessToken} // Node.js Express 서버\r\n  } else {\r\n    return {};\r\n  }\r\n}\r\n"],"mappings":"AAAA,eAAe,SAASA,UAAU,GAAG;EACnC;EACA;EACA;;EAEA;EACA,IAAIC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC;;EAEnD;EACA,IAAIJ,IAAI,IAAIA,IAAI,CAACK,WAAW,EAAE;IAC5B;IACA,OAAO;MAAEC,aAAa,EAAE,SAAS,GAAGN,IAAI,CAACK;IAAY,CAAC;IACtD;EACF,CAAC,MAAM;IACL,OAAO,CAAC,CAAC;EACX;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}