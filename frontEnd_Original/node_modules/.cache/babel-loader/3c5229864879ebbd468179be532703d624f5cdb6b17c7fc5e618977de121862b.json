{"ast":null,"code":"// auth.module.js 모듈 저장소\nimport AuthService from \"@/services/auth.service\";\n\n// 로컬스토리지의 user 객체 가져오기\nconst user = JSON.parse(localStorage.getItem('user'));\n\n// user 가 있으면 -> initialState = { status : { loggedIn: true }, user}\n// user 가 없으면 ->\n//     initialState = { status : { loggedIn: false }, user: null }\n// loggedIn : 현재 로그인된 상태인지 확인하는 변수\nconst initialState = user ? {\n  status: {\n    loggedIn: true\n  },\n  user\n} : {\n  status: {\n    loggedIn: false\n  },\n  user: null\n};\n// 모듈 저장소(auth : 모듈명)\n// 다른 js 에서 공유저장소의 모듈을 접근하는 방법\n// this.$store.state.모듈명.state값\nexport const auth = {\n  namespaced: true,\n  // state 속성 : 공유변수에 값저장\n  state: initialState,\n  // mutations 속성 : 공유 setter 함수 ( setter : 공유변수에 값을 저장하는 함수 )\n  mutations: {\n    // 로그인 성공시 실행되는 setter 함수 \n    loginSuccess(state, user) {\n      state.status.loggedIn = true;\n      state.user = user;\n    },\n    // 로그인 실패시 실행되는 setter 함수 \n    loginFailure(state) {\n      state.status.loggedIn = false;\n      state.user = null;\n    },\n    // 로그아웃시 실행되는 setter 함수 \n    logout(state) {\n      state.status.loggedIn = false;\n      state.user = null;\n    },\n    // 회웝가입 성공시 실행되는 setter 함수 \n    registerSuccess(state) {\n      state.status.loggedIn = false;\n    },\n    // 회웝가입 실패시 실행되는 setter 함수 \n    registerFailure(state) {\n      state.status.loggedIn = false;\n    }\n  },\n  // 공통함수 작성(정의) : 로그인/로그아웃/회원가입 공통함수 정의\n  // 로그인 공통함수 : 1) axios 연결(비동기함수) 2) 공통 상태관리(loggedIn)\n  // actions 속성 : store/비동기함수 정의를 위한 속성\n  // js 비동기 다루는 객체 : Promise 객체 , axios 리턴값 Promise 객체형태\n  // 참고) Promise 주요 함수 : 성공 -> Promise.resolve(데이터)\n  //                          실패 -> Promise.reject(데이터)\n  // 참고) async/await 키워드 이용한 비동기 프로그래밍 있음             \n  actions: {\n    // 로그인 공통함수 : login\n    login({\n      commit\n    }, user) {\n      return AuthService.login(user).then(user => {\n        // 공통 상태 저장(loggedIn)\n        // mutations(==setter) 의 loginSuccess 함수 호출\n        commit('loginSuccess', user);\n        return Promise.resolve(user); // js Promise 비동기 함수 : 성공했을때 사용 \n      }).catch(error => {\n        // mutations(==setter) 의 loginFailure 함수 호출\n        commit('loginFailure');\n        return Promise.reject(error); // js Promise 비동기 함수 : 실패했을때 사용 \n      });\n    },\n\n    // 로그아웃 공통함수 : logout\n    logout({\n      commit\n    }) {\n      AuthService.logout(); // 로컬스토리지 user 키 삭제\n      // mutations(==setter) 의 logout 함수 호출 (loggedIn = false)\n      commit('logout');\n    },\n    // 회원가입 공통함수 : register\n    register({\n      commit\n    }, user) {\n      return AuthService.register(user) // axios 함수 호출\n      .then(response => {\n        // mutations(==setter) 의 registerSuccess 함수 호출 (loggedIn = false)\n        commit('registerSuccess');\n        return Promise.resolve(response.data);\n      }).catch(error => {\n        // mutations(==setter) 의 registerFailure 함수 호출 (loggedIn = false)\n        commit('registerFailure');\n        return Promise.reject(error);\n      });\n    }\n  }\n};","map":{"version":3,"names":["AuthService","user","JSON","parse","localStorage","getItem","initialState","status","loggedIn","auth","namespaced","state","mutations","loginSuccess","loginFailure","logout","registerSuccess","registerFailure","actions","login","commit","then","Promise","resolve","catch","error","reject","register","response","data"],"sources":["F:/Work/GitHub/DsProject/frontEnd_Original/src/store/auth.module.js"],"sourcesContent":["// auth.module.js 모듈 저장소\r\nimport AuthService from \"@/services/auth.service\";\r\n\r\n// 로컬스토리지의 user 객체 가져오기\r\nconst user = JSON.parse(localStorage.getItem('user'));\r\n\r\n// user 가 있으면 -> initialState = { status : { loggedIn: true }, user}\r\n// user 가 없으면 ->\r\n//     initialState = { status : { loggedIn: false }, user: null }\r\n// loggedIn : 현재 로그인된 상태인지 확인하는 변수\r\nconst  initialState = user? { status : { loggedIn: true }, user}\r\n                          : { status : { loggedIn: false }, user: null };\r\n// 모듈 저장소(auth : 모듈명)\r\n// 다른 js 에서 공유저장소의 모듈을 접근하는 방법\r\n// this.$store.state.모듈명.state값\r\nexport const auth = {\r\n    namespaced : true,\r\n    // state 속성 : 공유변수에 값저장\r\n    state: initialState,\r\n    // mutations 속성 : 공유 setter 함수 ( setter : 공유변수에 값을 저장하는 함수 )\r\n    mutations: {\r\n        // 로그인 성공시 실행되는 setter 함수 \r\n        loginSuccess(state, user) {\r\n            state.status.loggedIn = true;\r\n            state.user = user;\r\n        },     \r\n        // 로그인 실패시 실행되는 setter 함수 \r\n        loginFailure(state) {\r\n            state.status.loggedIn = false;\r\n            state.user = null;\r\n        },        \r\n        // 로그아웃시 실행되는 setter 함수 \r\n        logout(state) {\r\n            state.status.loggedIn = false;\r\n            state.user = null;\r\n        },        \r\n        // 회웝가입 성공시 실행되는 setter 함수 \r\n        registerSuccess(state) {\r\n            state.status.loggedIn = false;\r\n        },        \r\n        // 회웝가입 실패시 실행되는 setter 함수 \r\n        registerFailure(state) {\r\n            state.status.loggedIn = false;\r\n        },\r\n    },\r\n    // 공통함수 작성(정의) : 로그인/로그아웃/회원가입 공통함수 정의\r\n    // 로그인 공통함수 : 1) axios 연결(비동기함수) 2) 공통 상태관리(loggedIn)\r\n    // actions 속성 : store/비동기함수 정의를 위한 속성\r\n    // js 비동기 다루는 객체 : Promise 객체 , axios 리턴값 Promise 객체형태\r\n    // 참고) Promise 주요 함수 : 성공 -> Promise.resolve(데이터)\r\n    //                          실패 -> Promise.reject(데이터)\r\n    // 참고) async/await 키워드 이용한 비동기 프로그래밍 있음             \r\n    actions: {\r\n        // 로그인 공통함수 : login\r\n        login({commit}, user) {\r\n            return AuthService.login(user)\r\n            .then(user => {\r\n                // 공통 상태 저장(loggedIn)\r\n                // mutations(==setter) 의 loginSuccess 함수 호출\r\n                commit('loginSuccess', user); \r\n                return Promise.resolve(user); // js Promise 비동기 함수 : 성공했을때 사용 \r\n            })\r\n            .catch(error => {\r\n                // mutations(==setter) 의 loginFailure 함수 호출\r\n                commit('loginFailure'); \r\n                return Promise.reject(error); // js Promise 비동기 함수 : 실패했을때 사용 \r\n            })\r\n        },\r\n        // 로그아웃 공통함수 : logout\r\n        logout({commit}) {\r\n            AuthService.logout(); // 로컬스토리지 user 키 삭제\r\n            // mutations(==setter) 의 logout 함수 호출 (loggedIn = false)\r\n            commit('logout');\r\n        },\r\n        // 회원가입 공통함수 : register\r\n        register({commit}, user) {\r\n            return AuthService.register(user) // axios 함수 호출\r\n            .then(response => {\r\n                // mutations(==setter) 의 registerSuccess 함수 호출 (loggedIn = false)\r\n                commit('registerSuccess');\r\n                return Promise.resolve(response.data);\r\n            })\r\n            .catch(error => {\r\n                // mutations(==setter) 의 registerFailure 함수 호출 (loggedIn = false)\r\n                commit('registerFailure');\r\n                return Promise.reject(error);\r\n            })\r\n        }\r\n    }\r\n};"],"mappings":"AAAA;AACA,OAAOA,WAAW,MAAM,yBAAyB;;AAEjD;AACA,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC;;AAErD;AACA;AACA;AACA;AACA,MAAOC,YAAY,GAAGL,IAAI,GAAE;EAAEM,MAAM,EAAG;IAAEC,QAAQ,EAAE;EAAK,CAAC;EAAEP;AAAI,CAAC,GACpC;EAAEM,MAAM,EAAG;IAAEC,QAAQ,EAAE;EAAM,CAAC;EAAEP,IAAI,EAAE;AAAK,CAAC;AACxE;AACA;AACA;AACA,OAAO,MAAMQ,IAAI,GAAG;EAChBC,UAAU,EAAG,IAAI;EACjB;EACAC,KAAK,EAAEL,YAAY;EACnB;EACAM,SAAS,EAAE;IACP;IACAC,YAAY,CAACF,KAAK,EAAEV,IAAI,EAAE;MACtBU,KAAK,CAACJ,MAAM,CAACC,QAAQ,GAAG,IAAI;MAC5BG,KAAK,CAACV,IAAI,GAAGA,IAAI;IACrB,CAAC;IACD;IACAa,YAAY,CAACH,KAAK,EAAE;MAChBA,KAAK,CAACJ,MAAM,CAACC,QAAQ,GAAG,KAAK;MAC7BG,KAAK,CAACV,IAAI,GAAG,IAAI;IACrB,CAAC;IACD;IACAc,MAAM,CAACJ,KAAK,EAAE;MACVA,KAAK,CAACJ,MAAM,CAACC,QAAQ,GAAG,KAAK;MAC7BG,KAAK,CAACV,IAAI,GAAG,IAAI;IACrB,CAAC;IACD;IACAe,eAAe,CAACL,KAAK,EAAE;MACnBA,KAAK,CAACJ,MAAM,CAACC,QAAQ,GAAG,KAAK;IACjC,CAAC;IACD;IACAS,eAAe,CAACN,KAAK,EAAE;MACnBA,KAAK,CAACJ,MAAM,CAACC,QAAQ,GAAG,KAAK;IACjC;EACJ,CAAC;EACD;EACA;EACA;EACA;EACA;EACA;EACA;EACAU,OAAO,EAAE;IACL;IACAC,KAAK,CAAC;MAACC;IAAM,CAAC,EAAEnB,IAAI,EAAE;MAClB,OAAOD,WAAW,CAACmB,KAAK,CAAClB,IAAI,CAAC,CAC7BoB,IAAI,CAACpB,IAAI,IAAI;QACV;QACA;QACAmB,MAAM,CAAC,cAAc,EAAEnB,IAAI,CAAC;QAC5B,OAAOqB,OAAO,CAACC,OAAO,CAACtB,IAAI,CAAC,CAAC,CAAC;MAClC,CAAC,CAAC,CACDuB,KAAK,CAACC,KAAK,IAAI;QACZ;QACAL,MAAM,CAAC,cAAc,CAAC;QACtB,OAAOE,OAAO,CAACI,MAAM,CAACD,KAAK,CAAC,CAAC,CAAC;MAClC,CAAC,CAAC;IACN,CAAC;;IACD;IACAV,MAAM,CAAC;MAACK;IAAM,CAAC,EAAE;MACbpB,WAAW,CAACe,MAAM,EAAE,CAAC,CAAC;MACtB;MACAK,MAAM,CAAC,QAAQ,CAAC;IACpB,CAAC;IACD;IACAO,QAAQ,CAAC;MAACP;IAAM,CAAC,EAAEnB,IAAI,EAAE;MACrB,OAAOD,WAAW,CAAC2B,QAAQ,CAAC1B,IAAI,CAAC,CAAC;MAAA,CACjCoB,IAAI,CAACO,QAAQ,IAAI;QACd;QACAR,MAAM,CAAC,iBAAiB,CAAC;QACzB,OAAOE,OAAO,CAACC,OAAO,CAACK,QAAQ,CAACC,IAAI,CAAC;MACzC,CAAC,CAAC,CACDL,KAAK,CAACC,KAAK,IAAI;QACZ;QACAL,MAAM,CAAC,iBAAiB,CAAC;QACzB,OAAOE,OAAO,CAACI,MAAM,CAACD,KAAK,CAAC;MAChC,CAAC,CAAC;IACN;EACJ;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}