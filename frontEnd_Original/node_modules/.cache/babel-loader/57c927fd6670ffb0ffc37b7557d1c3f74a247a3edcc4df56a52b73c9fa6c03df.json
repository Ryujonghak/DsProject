{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport User from \"@/model/user\";\nexport default {\n  data() {\n    return {\n      user: new User(\"\", \"\", \"\"),\n      submitted: false,\n      successful: false,\n      message: \"\"\n    };\n  },\n  computed: {\n    // loggedIn 상태 확인\n    loggedIn() {\n      // this.$store.state.모듈명.state값\n      return this.$store.state.auth.status.loggedIn;\n    }\n  },\n  // created() : Vue 생성되자 마자 실행되는 이벤트(화면은 생성되지 않은 상태)\n  created() {\n    if (this.loggedIn) {\n      // 로그인이 되어 있는 상태\n      this.$router.push(\"/profile\"); // 강제 /profile 로 이동\n    }\n  },\n\n  methods: {\n    // 회원가입 버튼 클릭시 실행되는 함수\n    handleRegister() {\n      this.message = \"\";\n      this.submitted = true; //  회원가입 버튼 클릭 = true\n      // vee-validate 함수 처리 방법\n      this.$validator.validateAll().then(isValid => {\n        // validateAll() 모두 통과하면 -> isValid = true  (유효함)\n        //                             -> isValid = false (유효하지 않음)\n        if (!isValid) {\n          return; // 함수 탈출(break)\n        }\n\n        // 공통함수 register 호출 :\n        // this.$store.dispatch(\"모듈명/함수명\", 매개변수)\n        this.$store.dispatch(\"auth/register\", this.user).then(response => {\n          this.message = response.message;\n          this.successful = true; // \"회원가입이 성공했습니다.\" 화면 출력\n        })\n        // 참고) if/else 문 대신에 -> or(||) and(&&) 연산자를 사용할때도 있음\n        // 로직체크 순서 : true || false, false && true\n        .catch(error => {\n          this.successful = false; // 회원가입 실패 -> 회원가입폼 다시 화면에 나옴\n          this.message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n        });\n      });\n    }\n  }\n};","map":{"version":3,"mappings":";AAiFA;AAEA;EACAA;IACA;MACAC;MACAC;MACAC;MACAC;IACA;EACA;EACAC;IACA;IACAC;MACA;MACA;IACA;EACA;EACA;EACAC;IACA;MACA;MACA;IACA;EACA;;EACAC;IACA;IACAC;MACA;MACA;MACA;MACA;QACA;QACA;QACA;UACA;QACA;;QAEA;QACA;QACA,iDACAC;UACA;UACA;QACA;QACA;QACA;QAAA,CACAC;UACA;UACA,eACAC,kBACAA,uBACAA,+BACAA,iBACAA;QACA;MACA;IACA;EACA;AACA","names":["data","user","submitted","successful","message","computed","loggedIn","created","methods","handleRegister","then","catch","error"],"sourceRoot":"src/views/kang","sources":["RegisterView.vue"],"sourcesContent":["<template>\r\n  <div class=\"col-md-12\">\r\n    <div class=\"card card-container\">\r\n      <img\r\n        id=\"profile-img\"\r\n        src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\r\n        class=\"profile-img-card\"\r\n      />\r\n      <form name=\"form\" @submit.prevent=\"handleRegister\">\r\n        <div v-if=\"!successful\">\r\n          <div class=\"form-group\">\r\n            <label for=\"name\">name</label>\r\n            <!-- v-validate : 유효성 체크 -->\r\n            <!-- v-validate=\"'required|min:3|max:20'\" 체크함 -->\r\n            <!-- errors.has('username') : 에러 발생했는지 검사 -->\r\n            <!-- {{errors.first('username')}} : 에러 있으면 화면 출력됨, 없으면 안됨 -->\r\n            <input\r\n              v-model=\"user.name\"\r\n              v-validate=\"'required|min:3|max:20'\"\r\n              type=\"text\"\r\n              class=\"form-control\"\r\n              name=\"username\"\r\n            />\r\n            <!-- 유효성 체크 후 에러 체크 : errors.hat(체크대상) -->\r\n            <!-- errors.first(체크대상) : 에러 내용 출력 -->\r\n            <div\r\n              v-if=\"submitted && errors.has('username')\"\r\n              class=\"alert-danger\"\r\n            >\r\n              {{ errors.first(\"username\") }}\r\n            </div>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label for=\"email\">Email</label>\r\n            <input\r\n              v-model=\"user.email\"\r\n              v-validate=\"'required|email|max:50'\"\r\n              type=\"email\"\r\n              class=\"form-control\"\r\n              name=\"email\"\r\n            />\r\n            <div v-if=\"submitted && errors.has('email')\" class=\"alert-danger\">\r\n              {{ errors.first(\"email\") }}\r\n            </div>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label for=\"password\">Password</label>\r\n            <input\r\n              v-model=\"user.password\"\r\n              v-validate=\"'required|min:6|max:40'\"\r\n              type=\"password\"\r\n              class=\"form-control\"\r\n              name=\"password\"\r\n            />\r\n            <div\r\n              v-if=\"submitted && errors.has('password')\"\r\n              class=\"alert-danger\"\r\n            >\r\n              {{ errors.first(\"password\") }}\r\n            </div>\r\n          </div>\r\n          <!-- 회원 가입 버튼 시작 -->\r\n          <div class=\"form-group mt-3\">\r\n            <button class=\"btn btn-primary btn-block\">Sign Up</button>\r\n          </div>\r\n          <!-- 회원 가입 버튼 끝 -->\r\n        </div>\r\n      </form>\r\n\r\n      <div\r\n        v-if=\"message\"\r\n        class=\"alert\"\r\n        :class=\"successful ? 'alert-success' : 'alert-danger'\"\r\n      >\r\n        {{ message }}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport User from \"@/model/user\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      user: new User(\"\", \"\", \"\"),\r\n      submitted: false,\r\n      successful: false,\r\n      message: \"\",\r\n    };\r\n  },\r\n  computed: {\r\n    // loggedIn 상태 확인\r\n    loggedIn() {\r\n      // this.$store.state.모듈명.state값\r\n      return this.$store.state.auth.status.loggedIn;\r\n    },\r\n  },\r\n  // created() : Vue 생성되자 마자 실행되는 이벤트(화면은 생성되지 않은 상태)\r\n  created() {\r\n    if (this.loggedIn) {\r\n      // 로그인이 되어 있는 상태\r\n      this.$router.push(\"/profile\"); // 강제 /profile 로 이동\r\n    }\r\n  },\r\n  methods: {\r\n    // 회원가입 버튼 클릭시 실행되는 함수\r\n    handleRegister() {\r\n      this.message = \"\";\r\n      this.submitted = true; //  회원가입 버튼 클릭 = true\r\n      // vee-validate 함수 처리 방법\r\n      this.$validator.validateAll().then((isValid) => {\r\n        // validateAll() 모두 통과하면 -> isValid = true  (유효함)\r\n        //                             -> isValid = false (유효하지 않음)\r\n        if (!isValid) {\r\n          return; // 함수 탈출(break)\r\n        }\r\n\r\n        // 공통함수 register 호출 :\r\n        // this.$store.dispatch(\"모듈명/함수명\", 매개변수)\r\n        this.$store.dispatch(\"auth/register\", this.user)\r\n          .then((response) => {\r\n            this.message = response.message;\r\n            this.successful = true; // \"회원가입이 성공했습니다.\" 화면 출력\r\n          })\r\n          // 참고) if/else 문 대신에 -> or(||) and(&&) 연산자를 사용할때도 있음\r\n          // 로직체크 순서 : true || false, false && true\r\n          .catch((error) => {\r\n            this.successful = false; // 회원가입 실패 -> 회원가입폼 다시 화면에 나옴\r\n            this.message =\r\n              (error.response &&\r\n                error.response.data &&\r\n                error.response.data.message) ||\r\n              error.message ||\r\n              error.toString();\r\n          });\r\n      });\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\nlabel {\r\n  display: block;\r\n  margin-top: 10px;\r\n}\r\n\r\n.card-container.card {\r\n  max-width: 350px !important;\r\n  padding: 40px 40px;\r\n}\r\n\r\n.card {\r\n  background-color: #f7f7f7;\r\n  padding: 20px 25px 30px;\r\n  margin: 0 auto 25px;\r\n  margin-top: 50px;\r\n  -moz-border-radius: 2px;\r\n  -webkit-border-radius: 2px;\r\n  border-radius: 2px;\r\n  -moz-box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);\r\n  -webkit-box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);\r\n  box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);\r\n}\r\n\r\n.profile-img-card {\r\n  width: 96px;\r\n  height: 96px;\r\n  margin: 0 auto 10px;\r\n  display: block;\r\n  -moz-border-radius: 50%;\r\n  -webkit-border-radius: 50%;\r\n  border-radius: 50%;\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}