{"ast":null,"code":"// user.service.js : test 파일\n// (토큰을 헤더포함 springboot 요청하는 샘플)\n// 토큰 헤더에 미포함 -> 401, 403 에러 발생(인증관련 에러)\nimport http from \"../http-common\";\nimport authHeader from \"../services/auth-header.js\";\nclass UserService {\n  getUserUsername(username) {\n    return http.get(`/user/username/${username}`);\n  }\n  getFindByIdName(name, email) {\n    return http.get(`/user/findById/${name}/${email}`);\n  }\n  getFindByPassword(username, answer) {\n    return http.get(`/user/findByPassword/${username}/${answer}`);\n  }\n  putChangePassword(id, user) {\n    return http.put(`/user/${id}`, user);\n  }\n  getAll(username, page, size) {\n    return http.get(`/user?username=${username}&page=${page}&size=${size}`, {\n      headers: authHeader()\n    });\n  }\n  get(id) {\n    return http.get(`/user/${id}`, {\n      headers: authHeader()\n    });\n  }\n  create(user) {\n    let userData = {\n      username: user.username,\n      email: user.email,\n      password: user.password,\n      role: [user.role],\n      phone: user.phone,\n      year: user.year,\n      month: user.month,\n      day: user.day,\n      name: user.name,\n      answer: user.answer\n    };\n    console.log(userData);\n    // return axios.post(API_URL + 'signup', userData);\n    return http.post(\"/user\", userData, {\n      headers: authHeader()\n    });\n  }\n  update(id, changePwd, user) {\n    let userData = {\n      username: user.username,\n      email: user.email,\n      password: user.password,\n      role: [user.role[0].name],\n      changePwd: changePwd,\n      phone: user.phone,\n      year: user.year,\n      month: user.month,\n      day: user.day,\n      name: user.name,\n      answer: user.answer\n    };\n    console.log(\"userService.update:\", userData);\n    console.log(\"userService.update.changePwd:\", changePwd);\n    return http.put(`/user/${id}`, userData, {\n      headers: authHeader()\n    });\n  }\n  delete(id) {\n    return http.delete(`/user/deletion/${id}`, {\n      headers: authHeader()\n    });\n  }\n}\nexport default new UserService();","map":{"version":3,"names":["http","authHeader","UserService","getUserUsername","username","get","getFindByIdName","name","email","getFindByPassword","answer","putChangePassword","id","user","put","getAll","page","size","headers","create","userData","password","role","phone","year","month","day","console","log","post","update","changePwd","delete"],"sources":["F:/Work/GitHub/DsProject/frontEnd_Original/src/services/user.service.js"],"sourcesContent":["// user.service.js : test 파일\r\n// (토큰을 헤더포함 springboot 요청하는 샘플)\r\n// 토큰 헤더에 미포함 -> 401, 403 에러 발생(인증관련 에러)\r\nimport http from \"../http-common\";\r\nimport authHeader from \"../services/auth-header.js\";\r\n\r\nclass UserService {\r\n  getUserUsername(username) {\r\n    return http.get(`/user/username/${username}`);\r\n  }\r\n  getFindByIdName(name, email) {\r\n    return http.get(`/user/findById/${name}/${email}`);\r\n  }\r\n  getFindByPassword(username, answer) {\r\n    return http.get(`/user/findByPassword/${username}/${answer}`);\r\n  }\r\n  putChangePassword(id, user) {\r\n    return http.put(`/user/${id}`, user);\r\n  }\r\n  getAll(username, page, size) {\r\n    return http.get(`/user?username=${username}&page=${page}&size=${size}`, {\r\n      headers: authHeader(),\r\n    });\r\n  }\r\n\r\n  get(id) {\r\n    return http.get(`/user/${id}`, { headers: authHeader() });\r\n  }\r\n\r\n  create(user) {\r\n    let userData = {\r\n      username: user.username,\r\n      email: user.email,\r\n      password: user.password,\r\n      role: [user.role],\r\n      phone : user.phone,\r\n      year : user.year,\r\n      month : user.month,\r\n      day : user.day,\r\n      name: user.name,\r\n      answer: user.answer\r\n    };\r\n\r\n    console.log(userData);\r\n    // return axios.post(API_URL + 'signup', userData);\r\n    return http.post(\"/user\", userData, { headers: authHeader() });\r\n  }\r\n\r\n  update(id, changePwd, user) {\r\n    let userData = {\r\n      username: user.username,\r\n      email: user.email,\r\n      password: user.password,\r\n      role: [user.role[0].name],\r\n      changePwd: changePwd,\r\n      phone : user.phone,\r\n      year : user.year,\r\n      month : user.month,\r\n      day : user.day,\r\n      name: user.name,\r\n      answer: user.answer\r\n    };\r\n\r\n    console.log(\"userService.update:\", userData);\r\n    console.log(\"userService.update.changePwd:\",changePwd);\r\n    return http.put(`/user/${id}`, userData, { headers: authHeader() });\r\n  }\r\n\r\n  delete(id) {\r\n    return http.delete(`/user/deletion/${id}`, { headers: authHeader() });\r\n  }\r\n}\r\n\r\nexport default new UserService();\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}