{"ast":null,"code":"// auth.service.js : 로그인 함수/로그아웃/회원가입 함수\nimport http from \"../http-common\";\nclass AuthService {\n  // 로그인 함수\n  // 1. front : DB에 사용자가 있는지 확인 요청( id/pwd )\n  // 2. back  : DB에 사용자가 있는지 확인 (id)\n  //         -> (if) 있으면 : 토큰발행해서 front로 전송 (user + 토큰)\n  //         -> 없으면 : 에러메세지 전송\n  login(user) {\n    // user 매개변수를 임시 객체에 저장\n    let userData = {\n      username: user.username,\n      password: user.password\n    };\n\n    // axios 통신 : 백엔드에 로그인 요청 (db에 사용자가 있는지 조회 요청)\n    //              로그인 인증 : Get 방식 x (보안) -> post 방식 사용\n    return http.post(\"/auth/signin\", userData)\n    // 요청 성공하면 then 실행\n    .then(response => {\n      // 응답정보에서 토큰 있는지 체크\n      if (response.data.accessToken) {\n        // user정보 + 토큰 저장\n        // localStorage : 텍스트 파일 ( 객체를 문자열로 변환해야함 )\n        // JSON.stringify(객체) : 객체 -> 문자열로 변환됨\n        localStorage.setItem(\"user\", JSON.stringify(response.data));\n      }\n      return response.data;\n    });\n  }\n\n  // 로그아웃 함수\n  logout() {\n    localStorage.removeItem(\"user\");\n  }\n\n  // 회원가입 함수\n  //   front : user 새회원정보를 db저장 요청\n  //   back : user 저장하기전에 -> password 암호화 -> DB 저장함\n  register(user) {\n    console.log(user);\n    // user 매개변수를 임시 객체에 저장\n    let userData = {\n      email: user.email,\n      password: user.password,\n      username: user.username,\n      phone: user.phone,\n      year: user.year,\n      month: user.month,\n      day: user.day,\n      name: user.name,\n      answer: user.answer\n    };\n    return http.post('/auth/signup', userData);\n  }\n}\nexport default new AuthService();","map":{"version":3,"names":["http","AuthService","login","user","userData","username","password","post","then","response","data","accessToken","localStorage","setItem","JSON","stringify","logout","removeItem","register","console","log","email","phone","year","month","day","name","answer"],"sources":["F:/Work/GitHub/DsProject/frontEnd_Original/src/services/auth.service.js"],"sourcesContent":["// auth.service.js : 로그인 함수/로그아웃/회원가입 함수\r\nimport http from \"../http-common\";\r\n\r\nclass AuthService {\r\n  // 로그인 함수\r\n  // 1. front : DB에 사용자가 있는지 확인 요청( id/pwd )\r\n  // 2. back  : DB에 사용자가 있는지 확인 (id)\r\n  //         -> (if) 있으면 : 토큰발행해서 front로 전송 (user + 토큰)\r\n  //         -> 없으면 : 에러메세지 전송\r\n  login(user) {\r\n    // user 매개변수를 임시 객체에 저장\r\n    let userData = {\r\n      username: user.username,\r\n      password: user.password,\r\n    };\r\n\r\n    // axios 통신 : 백엔드에 로그인 요청 (db에 사용자가 있는지 조회 요청)\r\n    //              로그인 인증 : Get 방식 x (보안) -> post 방식 사용\r\n    return (\r\n      http\r\n        .post(\"/auth/signin\", userData)\r\n        // 요청 성공하면 then 실행\r\n        .then((response) => {\r\n          // 응답정보에서 토큰 있는지 체크\r\n          if (response.data.accessToken) {\r\n            // user정보 + 토큰 저장\r\n            // localStorage : 텍스트 파일 ( 객체를 문자열로 변환해야함 )\r\n            // JSON.stringify(객체) : 객체 -> 문자열로 변환됨\r\n            localStorage.setItem(\"user\", JSON.stringify(response.data));\r\n          }\r\n\r\n          return response.data;\r\n        })\r\n    );\r\n  }\r\n\r\n  // 로그아웃 함수\r\n  logout() {\r\n    localStorage.removeItem(\"user\");\r\n  }\r\n\r\n  // 회원가입 함수\r\n//   front : user 새회원정보를 db저장 요청\r\n//   back : user 저장하기전에 -> password 암호화 -> DB 저장함\r\n  register(user) {\r\n    console.log(user);\r\n    // user 매개변수를 임시 객체에 저장\r\n    let userData = {\r\n      email: user.email,\r\n      password: user.password,\r\n      username: user.username,\r\n      phone : user.phone,\r\n      year : user.year,\r\n      month : user.month,\r\n      day : user.day,\r\n      name: user.name,\r\n      answer: user.answer\r\n    };\r\n\r\n    return http.post('/auth/signup', userData);\r\n  }\r\n}\r\n\r\nexport default new AuthService();\r\n"],"mappings":"AAAA;AACA,OAAOA,IAAI,MAAM,gBAAgB;AAEjC,MAAMC,WAAW,CAAC;EAChB;EACA;EACA;EACA;EACA;EACAC,KAAK,CAACC,IAAI,EAAE;IACV;IACA,IAAIC,QAAQ,GAAG;MACbC,QAAQ,EAAEF,IAAI,CAACE,QAAQ;MACvBC,QAAQ,EAAEH,IAAI,CAACG;IACjB,CAAC;;IAED;IACA;IACA,OACEN,IAAI,CACDO,IAAI,CAAC,cAAc,EAAEH,QAAQ;IAC9B;IAAA,CACCI,IAAI,CAAEC,QAAQ,IAAK;MAClB;MACA,IAAIA,QAAQ,CAACC,IAAI,CAACC,WAAW,EAAE;QAC7B;QACA;QACA;QACAC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACN,QAAQ,CAACC,IAAI,CAAC,CAAC;MAC7D;MAEA,OAAOD,QAAQ,CAACC,IAAI;IACtB,CAAC,CAAC;EAER;;EAEA;EACAM,MAAM,GAAG;IACPJ,YAAY,CAACK,UAAU,CAAC,MAAM,CAAC;EACjC;;EAEA;EACF;EACA;EACEC,QAAQ,CAACf,IAAI,EAAE;IACbgB,OAAO,CAACC,GAAG,CAACjB,IAAI,CAAC;IACjB;IACA,IAAIC,QAAQ,GAAG;MACbiB,KAAK,EAAElB,IAAI,CAACkB,KAAK;MACjBf,QAAQ,EAAEH,IAAI,CAACG,QAAQ;MACvBD,QAAQ,EAAEF,IAAI,CAACE,QAAQ;MACvBiB,KAAK,EAAGnB,IAAI,CAACmB,KAAK;MAClBC,IAAI,EAAGpB,IAAI,CAACoB,IAAI;MAChBC,KAAK,EAAGrB,IAAI,CAACqB,KAAK;MAClBC,GAAG,EAAGtB,IAAI,CAACsB,GAAG;MACdC,IAAI,EAAEvB,IAAI,CAACuB,IAAI;MACfC,MAAM,EAAExB,IAAI,CAACwB;IACf,CAAC;IAED,OAAO3B,IAAI,CAACO,IAAI,CAAC,cAAc,EAAEH,QAAQ,CAAC;EAC5C;AACF;AAEA,eAAe,IAAIH,WAAW,EAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}